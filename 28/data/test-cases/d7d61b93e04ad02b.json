{"uid":"d7d61b93e04ad02b","name":"Test case to perform POST operation using Postman APIs","fullName":"qa_tests.reference_tests.test_demo_api.TestDemoAPIs#test_003","historyId":"24d3211808a44220010bd8d76a02034e","time":{"start":1728040971545,"stop":1728040971856,"duration":311},"status":"failed","statusMessage":"Failed: Test case failed with response code 401","statusTrace":"self = <qa_tests.reference_tests.test_demo_api.TestDemoAPIs object at 0x7f3459002ab0>\napi_setup_teardown = ('QA', <Section: QA ENV>, <common.user_asserts.UserAsserts object at 0x7f34577e97c0>, <Logger common.logger (INFO)>)\n\n    @allure.title(\"Test case to perform POST operation using Postman APIs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_003(self, api_setup_teardown):\n        env_under_test, config_data, user_asserts, logger = api_setup_teardown\n        test_case_name = inspect.currentframe().f_code.co_name\n    \n        logger.info(f\"Test under execution : {test_case_name}\")\n        base_url = config_data['base_url']\n        decrypted_text = CommonFunctions.decrypt_key(encoded_str=config_data['encrypted_header'], key=config_data['decoder'])\n    \n        # Initialize headers. Can be moved to separate file later.\n        headers = {\n            'x-api-key': decrypted_text,\n            'Content-Type': 'application/json',\n            'User-Agent': 'my-app/0.0.1'\n        }\n    \n        # Prepare request data. Can be moved to separate request file later.\n        request_data = {\n            \"workspace\": {\n                \"name\": \"created_from_python_framework\",\n                \"type\": \"personal\",\n                \"description\": \"created for testing purpose\"\n            }\n        }\n    \n        # Request preparation.\n        rest_client = RestClient(logger)\n        rest_client.base_url = base_url\n        rest_client.request_headers = headers\n        rest_client.end_point = '/workspaces?'\n        rest_client.request_data = request_data\n    \n        # Send post request.\n>       response: Response = rest_client.execute_request('POST')\n\nqa_tests/reference_tests/test_demo_api.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.rest_client.RestClient object at 0x7f3457813200>\nrequest_type = 'POST'\n\n    @allure.step('Perform {1} request')\n    def execute_request(self, request_type: str) -> Response:\n        request_url = self.validate_end_point()\n        response: Response = None\n        try:\n            self.logger.info(f\"Initializing {request_type} rest call from {request_url}\")\n            match request_type.upper():\n                case 'GET':\n                    response: Response = self.__https_session.get(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'POST':\n                    response: Response = self.__https_session.post(request_url, params=self.__request_param,\n                                                                   headers=self.__https_session.headers,\n                                                                   data=self.__request_data, verify=True)\n                case 'PUT':\n                    response: Response = self.__https_session.put(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'PATCH':\n                    response: Response = self.__https_session.patch(request_url, params=self.__request_param,\n                                                                    headers=self.__https_session.headers,\n                                                                    data=self.__request_data, verify=True)\n                case 'DELETE':\n                    response: Response = self.__https_session.delete(request_url, params=self.__request_param,\n                                                                     headers=self.__https_session.headers,\n                                                                     data=self.__request_data, verify=True)\n                case _:\n                    self.logger.info(f\"Invalid request type : {request_type}\")\n    \n            if response.status_code in self.success_status_code:\n                self.logger.info(f\"{request_type} request is Successful.....\")\n            else:\n                self.logger.error(f\"{request_type} Request failed....!!!\")\n                self.logger.error(f\"Response Error Message: {self.parse_response(response)}\")\n>               pytest.fail(f'Test case failed with response code {response.status_code}')\nE               Failed: Test case failed with response code 401\n\ncommon/rest_client.py:125: Failed","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"api_setup_teardown","time":{"start":1728040971173,"stop":1728040971174,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Test case failed with response code 401","statusTrace":"self = <qa_tests.reference_tests.test_demo_api.TestDemoAPIs object at 0x7f3459002ab0>\napi_setup_teardown = ('QA', <Section: QA ENV>, <common.user_asserts.UserAsserts object at 0x7f34577e97c0>, <Logger common.logger (INFO)>)\n\n    @allure.title(\"Test case to perform POST operation using Postman APIs\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_003(self, api_setup_teardown):\n        env_under_test, config_data, user_asserts, logger = api_setup_teardown\n        test_case_name = inspect.currentframe().f_code.co_name\n    \n        logger.info(f\"Test under execution : {test_case_name}\")\n        base_url = config_data['base_url']\n        decrypted_text = CommonFunctions.decrypt_key(encoded_str=config_data['encrypted_header'], key=config_data['decoder'])\n    \n        # Initialize headers. Can be moved to separate file later.\n        headers = {\n            'x-api-key': decrypted_text,\n            'Content-Type': 'application/json',\n            'User-Agent': 'my-app/0.0.1'\n        }\n    \n        # Prepare request data. Can be moved to separate request file later.\n        request_data = {\n            \"workspace\": {\n                \"name\": \"created_from_python_framework\",\n                \"type\": \"personal\",\n                \"description\": \"created for testing purpose\"\n            }\n        }\n    \n        # Request preparation.\n        rest_client = RestClient(logger)\n        rest_client.base_url = base_url\n        rest_client.request_headers = headers\n        rest_client.end_point = '/workspaces?'\n        rest_client.request_data = request_data\n    \n        # Send post request.\n>       response: Response = rest_client.execute_request('POST')\n\nqa_tests/reference_tests/test_demo_api.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.rest_client.RestClient object at 0x7f3457813200>\nrequest_type = 'POST'\n\n    @allure.step('Perform {1} request')\n    def execute_request(self, request_type: str) -> Response:\n        request_url = self.validate_end_point()\n        response: Response = None\n        try:\n            self.logger.info(f\"Initializing {request_type} rest call from {request_url}\")\n            match request_type.upper():\n                case 'GET':\n                    response: Response = self.__https_session.get(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'POST':\n                    response: Response = self.__https_session.post(request_url, params=self.__request_param,\n                                                                   headers=self.__https_session.headers,\n                                                                   data=self.__request_data, verify=True)\n                case 'PUT':\n                    response: Response = self.__https_session.put(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'PATCH':\n                    response: Response = self.__https_session.patch(request_url, params=self.__request_param,\n                                                                    headers=self.__https_session.headers,\n                                                                    data=self.__request_data, verify=True)\n                case 'DELETE':\n                    response: Response = self.__https_session.delete(request_url, params=self.__request_param,\n                                                                     headers=self.__https_session.headers,\n                                                                     data=self.__request_data, verify=True)\n                case _:\n                    self.logger.info(f\"Invalid request type : {request_type}\")\n    \n            if response.status_code in self.success_status_code:\n                self.logger.info(f\"{request_type} request is Successful.....\")\n            else:\n                self.logger.error(f\"{request_type} Request failed....!!!\")\n                self.logger.error(f\"Response Error Message: {self.parse_response(response)}\")\n>               pytest.fail(f'Test case failed with response code {response.status_code}')\nE               Failed: Test case failed with response code 401\n\ncommon/rest_client.py:125: Failed","steps":[{"name":"Set Base URL as 'https://api.postman.com'","time":{"start":1728040971545,"stop":1728040971545,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'https://api.postman.com'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set request headers","time":{"start":1728040971546,"stop":1728040971546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"{'x-api-key': 'PMAK-66fe7a030fb600000171b8e3-2cde9e5fb6b24260acd2efc2408bfddd95', 'Content-Type': 'application/json', 'User-Agent': 'my-app/0.0.1'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set api end point as '/workspaces?'","time":{"start":1728040971546,"stop":1728040971546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'/workspaces?'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set API request data as {'workspace': {'name': 'created_from_python_framework', 'type': 'personal', 'description': 'created for testing purpose'}}","time":{"start":1728040971546,"stop":1728040971546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"{'workspace': {'name': 'created_from_python_framework', 'type': 'personal', 'description': 'created for testing purpose'}}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Perform 'POST' request","time":{"start":1728040971546,"stop":1728040971855,"duration":309},"status":"failed","statusMessage":"Failed: Test case failed with response code 401\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/PytestAutomationFramework/PytestAutomationFramework/common/rest_client.py\", line 125, in execute_request\n    pytest.fail(f'Test case failed with response code {response.status_code}')\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Get Base URL","time":{"start":1728040971546,"stop":1728040971546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Get api end point","time":{"start":1728040971546,"stop":1728040971546,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request_type","value":"'POST'"}],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"704854c17d3fb9c3","name":"log","source":"704854c17d3fb9c3.txt","type":"text/plain","size":623}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_setup_teardown::0","time":{"start":1728040972566,"stop":1728040972567,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"Postman Workspace Automation"},{"name":"severity","value":"normal"},{"name":"subSuite","value":"Postman Workspace APIs"},{"name":"feature","value":"API Automation"},{"name":"suite","value":"Sanity Test Cases"},{"name":"host","value":"fv-az656-939"},{"name":"thread","value":"5290-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"qa_tests.reference_tests.test_demo_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":10},"items":[{"uid":"6772211d419bfd4c","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/27//#testresult/6772211d419bfd4c","status":"passed","time":{"start":1728029034260,"stop":1728029041559,"duration":7299}},{"uid":"bfacfb39f56c5347","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/26//#testresult/bfacfb39f56c5347","status":"passed","time":{"start":1728028881242,"stop":1728028881616,"duration":374}},{"uid":"b617f07b97f140d7","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/25//#testresult/b617f07b97f140d7","status":"passed","time":{"start":1728028523182,"stop":1728028523535,"duration":353}},{"uid":"8ddb2b7cfee19b62","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/24//#testresult/8ddb2b7cfee19b62","status":"passed","time":{"start":1727972496769,"stop":1727972497409,"duration":640}},{"uid":"157c3c00586421e7","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/23//#testresult/157c3c00586421e7","status":"passed","time":{"start":1727964527747,"stop":1727964528095,"duration":348}},{"uid":"904b602256cf3b08","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/22//#testresult/904b602256cf3b08","status":"passed","time":{"start":1727964267754,"stop":1727964268406,"duration":652}},{"uid":"eff4a5a0b8aaebd9","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/21//#testresult/eff4a5a0b8aaebd9","status":"passed","time":{"start":1727949549635,"stop":1727949550099,"duration":464}},{"uid":"2fe3273e91a3b811","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/20//#testresult/2fe3273e91a3b811","status":"passed","time":{"start":1727949266685,"stop":1727949267251,"duration":566}},{"uid":"1a22bacdec0b596f","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/19//#testresult/1a22bacdec0b596f","status":"passed","time":{"start":1727949002862,"stop":1727949005453,"duration":2591}}]},"tags":[]},"source":"d7d61b93e04ad02b.json","parameterValues":[]}