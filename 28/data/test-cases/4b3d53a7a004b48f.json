{"uid":"4b3d53a7a004b48f","name":"Test case to perform delete operation","fullName":"qa_tests.reference_tests.test_demo_api.TestDemoAPIs#test_005","historyId":"695967fc5c48bfbbdaeb36087fabd0d1","time":{"start":1728040972177,"stop":1728040972558,"duration":381},"status":"failed","statusMessage":"Failed: Test case failed with response code 401","statusTrace":"self = <qa_tests.reference_tests.test_demo_api.TestDemoAPIs object at 0x7f3457812f60>\napi_setup_teardown = ('QA', <Section: QA ENV>, <common.user_asserts.UserAsserts object at 0x7f34577e97c0>, <Logger common.logger (INFO)>)\n\n    @allure.title(\"Test case to perform delete operation\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_005(self, api_setup_teardown):\n        # WORKSPACE_NAME_TO_BE_DELETED = 'created_from_python_framework'\n        WORKSPACE_NAME_TO_BE_DELETED = 'new_name'\n    \n        env_under_test, config_data, user_asserts, logger = api_setup_teardown\n        test_case_name = inspect.currentframe().f_code.co_name\n    \n        logger.info(f\"Test under execution : {test_case_name}\")\n        base_url = config_data['base_url']\n    \n        decrypted_text = CommonFunctions.decrypt_key(encoded_str=config_data['encrypted_header'], key=config_data['decoder'])\n    \n        # Initialize headers. Can be moved to separate file later.\n        headers = {\n            'x-api-key': decrypted_text,\n            'Content-Type': 'application/json',\n            'User-Agent': 'my-app/0.0.1'\n        }\n    \n        # Get all existing workspaces.\n        # Request preparation.\n        rest_client = RestClient(logger)\n        rest_client.base_url = base_url\n    \n        rest_client.request_headers = headers\n        rest_client.end_point = '/workspaces?'\n    \n        # Send Request.\n>       response: Response = rest_client.execute_request('GET')\n\nqa_tests/reference_tests/test_demo_api.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.rest_client.RestClient object at 0x7f3458e875f0>\nrequest_type = 'GET'\n\n    @allure.step('Perform {1} request')\n    def execute_request(self, request_type: str) -> Response:\n        request_url = self.validate_end_point()\n        response: Response = None\n        try:\n            self.logger.info(f\"Initializing {request_type} rest call from {request_url}\")\n            match request_type.upper():\n                case 'GET':\n                    response: Response = self.__https_session.get(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'POST':\n                    response: Response = self.__https_session.post(request_url, params=self.__request_param,\n                                                                   headers=self.__https_session.headers,\n                                                                   data=self.__request_data, verify=True)\n                case 'PUT':\n                    response: Response = self.__https_session.put(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'PATCH':\n                    response: Response = self.__https_session.patch(request_url, params=self.__request_param,\n                                                                    headers=self.__https_session.headers,\n                                                                    data=self.__request_data, verify=True)\n                case 'DELETE':\n                    response: Response = self.__https_session.delete(request_url, params=self.__request_param,\n                                                                     headers=self.__https_session.headers,\n                                                                     data=self.__request_data, verify=True)\n                case _:\n                    self.logger.info(f\"Invalid request type : {request_type}\")\n    \n            if response.status_code in self.success_status_code:\n                self.logger.info(f\"{request_type} request is Successful.....\")\n            else:\n                self.logger.error(f\"{request_type} Request failed....!!!\")\n                self.logger.error(f\"Response Error Message: {self.parse_response(response)}\")\n>               pytest.fail(f'Test case failed with response code {response.status_code}')\nE               Failed: Test case failed with response code 401\n\ncommon/rest_client.py:125: Failed","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"api_setup_teardown","time":{"start":1728040971173,"stop":1728040971174,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"Failed: Test case failed with response code 401","statusTrace":"self = <qa_tests.reference_tests.test_demo_api.TestDemoAPIs object at 0x7f3457812f60>\napi_setup_teardown = ('QA', <Section: QA ENV>, <common.user_asserts.UserAsserts object at 0x7f34577e97c0>, <Logger common.logger (INFO)>)\n\n    @allure.title(\"Test case to perform delete operation\")\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_005(self, api_setup_teardown):\n        # WORKSPACE_NAME_TO_BE_DELETED = 'created_from_python_framework'\n        WORKSPACE_NAME_TO_BE_DELETED = 'new_name'\n    \n        env_under_test, config_data, user_asserts, logger = api_setup_teardown\n        test_case_name = inspect.currentframe().f_code.co_name\n    \n        logger.info(f\"Test under execution : {test_case_name}\")\n        base_url = config_data['base_url']\n    \n        decrypted_text = CommonFunctions.decrypt_key(encoded_str=config_data['encrypted_header'], key=config_data['decoder'])\n    \n        # Initialize headers. Can be moved to separate file later.\n        headers = {\n            'x-api-key': decrypted_text,\n            'Content-Type': 'application/json',\n            'User-Agent': 'my-app/0.0.1'\n        }\n    \n        # Get all existing workspaces.\n        # Request preparation.\n        rest_client = RestClient(logger)\n        rest_client.base_url = base_url\n    \n        rest_client.request_headers = headers\n        rest_client.end_point = '/workspaces?'\n    \n        # Send Request.\n>       response: Response = rest_client.execute_request('GET')\n\nqa_tests/reference_tests/test_demo_api.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.rest_client.RestClient object at 0x7f3458e875f0>\nrequest_type = 'GET'\n\n    @allure.step('Perform {1} request')\n    def execute_request(self, request_type: str) -> Response:\n        request_url = self.validate_end_point()\n        response: Response = None\n        try:\n            self.logger.info(f\"Initializing {request_type} rest call from {request_url}\")\n            match request_type.upper():\n                case 'GET':\n                    response: Response = self.__https_session.get(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'POST':\n                    response: Response = self.__https_session.post(request_url, params=self.__request_param,\n                                                                   headers=self.__https_session.headers,\n                                                                   data=self.__request_data, verify=True)\n                case 'PUT':\n                    response: Response = self.__https_session.put(request_url, params=self.__request_param,\n                                                                  headers=self.__https_session.headers,\n                                                                  data=self.__request_data, verify=True)\n                case 'PATCH':\n                    response: Response = self.__https_session.patch(request_url, params=self.__request_param,\n                                                                    headers=self.__https_session.headers,\n                                                                    data=self.__request_data, verify=True)\n                case 'DELETE':\n                    response: Response = self.__https_session.delete(request_url, params=self.__request_param,\n                                                                     headers=self.__https_session.headers,\n                                                                     data=self.__request_data, verify=True)\n                case _:\n                    self.logger.info(f\"Invalid request type : {request_type}\")\n    \n            if response.status_code in self.success_status_code:\n                self.logger.info(f\"{request_type} request is Successful.....\")\n            else:\n                self.logger.error(f\"{request_type} Request failed....!!!\")\n                self.logger.error(f\"Response Error Message: {self.parse_response(response)}\")\n>               pytest.fail(f'Test case failed with response code {response.status_code}')\nE               Failed: Test case failed with response code 401\n\ncommon/rest_client.py:125: Failed","steps":[{"name":"Set Base URL as 'https://api.postman.com'","time":{"start":1728040972178,"stop":1728040972178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'https://api.postman.com'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set request headers","time":{"start":1728040972178,"stop":1728040972178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"{'x-api-key': 'PMAK-66fe7a030fb600000171b8e3-2cde9e5fb6b24260acd2efc2408bfddd95', 'Content-Type': 'application/json', 'User-Agent': 'my-app/0.0.1'}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Set api end point as '/workspaces?'","time":{"start":1728040972178,"stop":1728040972178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"value","value":"'/workspaces?'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Perform 'GET' request","time":{"start":1728040972178,"stop":1728040972557,"duration":379},"status":"failed","statusMessage":"Failed: Test case failed with response code 401\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/PytestAutomationFramework/PytestAutomationFramework/common/rest_client.py\", line 125, in execute_request\n    pytest.fail(f'Test case failed with response code {response.status_code}')\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[{"name":"Get Base URL","time":{"start":1728040972178,"stop":1728040972178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Get api end point","time":{"start":1728040972178,"stop":1728040972178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"request_type","value":"'GET'"}],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"63f1eb7f7eaf3b06","name":"log","source":"63f1eb7f7eaf3b06.txt","type":"text/plain","size":897}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":6,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_setup_teardown::0","time":{"start":1728040972566,"stop":1728040972567,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"Postman Workspace Automation"},{"name":"severity","value":"normal"},{"name":"subSuite","value":"Postman Workspace APIs"},{"name":"feature","value":"API Automation"},{"name":"suite","value":"Sanity Test Cases"},{"name":"host","value":"fv-az656-939"},{"name":"thread","value":"5290-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"qa_tests.reference_tests.test_demo_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":10},"items":[{"uid":"3ae341604f44d1fb","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/27//#testresult/3ae341604f44d1fb","status":"passed","time":{"start":1728029043196,"stop":1728029044136,"duration":940}},{"uid":"bafd343242dfa573","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/26//#testresult/bafd343242dfa573","status":"passed","time":{"start":1728028882648,"stop":1728028883641,"duration":993}},{"uid":"45acec7b852542cc","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/25//#testresult/45acec7b852542cc","status":"passed","time":{"start":1728028524449,"stop":1728028525023,"duration":574}},{"uid":"94646e281652c5f5","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/24//#testresult/94646e281652c5f5","status":"passed","time":{"start":1727972498770,"stop":1727972499646,"duration":876}},{"uid":"f220790d8cb481c4","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/23//#testresult/f220790d8cb481c4","status":"passed","time":{"start":1727964528708,"stop":1727964529255,"duration":547}},{"uid":"edd89b7eb7e1af7e","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/22//#testresult/edd89b7eb7e1af7e","status":"passed","time":{"start":1727964269715,"stop":1727964270783,"duration":1068}},{"uid":"a4f6a285ab24bcd9","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/21//#testresult/a4f6a285ab24bcd9","status":"passed","time":{"start":1727949550778,"stop":1727949551314,"duration":536}},{"uid":"330165b3b8b89151","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/20//#testresult/330165b3b8b89151","status":"passed","time":{"start":1727949268431,"stop":1727949269387,"duration":956}},{"uid":"59ceb9c37151ff89","reportUrl":"https://shridhar007.github.io/PytestAutomationFramework/19//#testresult/59ceb9c37151ff89","status":"passed","time":{"start":1727949006529,"stop":1727949007492,"duration":963}}]},"tags":[]},"source":"4b3d53a7a004b48f.json","parameterValues":[]}